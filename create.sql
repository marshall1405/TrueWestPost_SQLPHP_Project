CREATE TABLE Houses (
    HouseID INT PRIMARY KEY,
    HouseName VARCHAR(255) NOT NULL,
    CreatorCount INT DEFAULT 0 NOT NULL,
    FanCount INT DEFAULT 0 NOT NULL
);

CREATE TABLE HouseRoles (
    HouseRoleID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    HouseRoleName VARCHAR(255) UNIQUE NOT NULL,
    Tasks VARCHAR(1000) NOT NULL
);

CREATE TABLE Accounts (
    AccountID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    AccountName VARCHAR(255) NOT NULL,
    Email VARCHAR(255) UNIQUE NOT NULL,
    Age INT NOT NULL CHECK(Age >= 18),
    HouseID INT NOT NULL, 
    HouseRoleID INT NOT NULL,
    FOREIGN KEY (HouseID) REFERENCES Houses(HouseID) ON DELETE CASCADE,
    FOREIGN KEY (HouseRoleID) REFERENCES HouseRoles(HouseRoleID) ON DELETE CASCADE
);

CREATE TABLE Creators (
    CreatorID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    AccountID INT UNIQUE,
    FanCount INT DEFAULT 0,
    MonthlyReaderCount INT DEFAULT 0,
    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID) ON DELETE CASCADE
);

CREATE TABLE Collaborations (
    CollaborationID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Creator1 INT,
    Creator2 INT,
    FOREIGN KEY (Creator1) REFERENCES Creators(CreatorID) ON DELETE CASCADE,
    FOREIGN KEY (Creator2) REFERENCES Creators(CreatorID) ON DELETE CASCADE,
    CHECK(Creator1 <> Creator2)
);


CREATE TABLE Articles (
    ArticleID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ArticleName VARCHAR(255) NOT NULL,
    IsCollaboration NUMBER(1) NOT NULL,
    Author INT,
    Collaboration INT,
    ReaderCount INT DEFAULT 0,
    OpinionCount INT DEFAULT 0,
    FOREIGN KEY (Author) REFERENCES Creators(CreatorID) ON DELETE CASCADE,
    FOREIGN KEY (Collaboration) REFERENCES Collaborations(CollaborationID) ON DELETE CASCADE,
    CHECK (
        (IsCollaboration = 1 AND Author IS NULL AND Collaboration IS NOT NULL)
        OR (IsCollaboration = 0 AND Collaboration IS NULL AND Author IS NOT NULL)
    )
);

CREATE TABLE Opinions (
    CreatorID INT,
    ArticleID INT,
    ReaderCount INT DEFAULT 0,
    CommunityRating INT DEFAULT 0,
    PRIMARY KEY (CreatorID, ArticleID),
    FOREIGN KEY (CreatorID) REFERENCES Creators(CreatorID) ON DELETE CASCADE,
    FOREIGN KEY (ArticleID) REFERENCES Articles(ArticleID) ON DELETE CASCADE
);

CREATE TABLE OutputMessages (
    message VARCHAR2(4000)
);


CREATE VIEW CreatorArticlesView AS
SELECT
    C.CreatorID,
    A.ArticleID,
    A.ArticleName,
    MAX(A.ReaderCount) AS HighestReaderCount,
    C.FanCount AS CreatorFanCount
FROM
    Creators C
JOIN
    Articles A ON C.CreatorID = A.Author
GROUP BY
    C.CreatorID, A.ArticleID, A.ArticleName, C.FanCount;
/


CREATE OR REPLACE TRIGGER IncreaseFanCount
AFTER INSERT
ON Accounts
FOR EACH ROW
BEGIN
    UPDATE Houses
    SET FanCount = FanCount + 1
    WHERE HouseID = :NEW.HouseID;
END;
/


CREATE OR REPLACE TRIGGER UpdateFanAndCreatorCount
AFTER INSERT
ON Creators
FOR EACH ROW
BEGIN
    UPDATE Houses
    SET FanCount = FanCount - 1
    WHERE HouseID = (SELECT HouseID FROM Accounts WHERE AccountID = :NEW.AccountID);
    
    UPDATE Houses
    SET CreatorCount = CreatorCount + 1
    WHERE HouseID = (SELECT HouseID FROM Accounts WHERE AccountID = :NEW.AccountID);
END;
/



CREATE OR REPLACE TRIGGER UpdateOpinionCount
AFTER INSERT
ON Opinions
FOR EACH ROW
BEGIN
    UPDATE Articles
    SET OpinionCount = OpinionCount + 1
    WHERE ArticleID = :NEW.ArticleID;
END;
/


CREATE OR REPLACE TRIGGER UpdateCountsOnAccountUpdate
AFTER UPDATE
ON Accounts
FOR EACH ROW
DECLARE
    v_oldHouseID INT;
    v_newHouseID INT;
    v_isCreator NUMBER;
BEGIN
    v_oldHouseID := :OLD.HouseID;
    v_newHouseID := :NEW.HouseID;

    SELECT COUNT(*)
    INTO v_isCreator
    FROM Creators
    WHERE AccountID = :NEW.AccountID;

    IF v_isCreator = 1 THEN
        UPDATE Houses
        SET CreatorCount = CreatorCount - 1
        WHERE HouseID = v_oldHouseID;

        UPDATE Houses
        SET CreatorCount = CreatorCount + 1
        WHERE HouseID = v_newHouseID;
    ELSE
        UPDATE Houses
        SET FanCount = FanCount - 1
        WHERE HouseID = v_oldHouseID;

        UPDATE Houses
        SET FanCount = FanCount + 1
        WHERE HouseID = v_newHouseID;
    END IF;
END;
/


CREATE SEQUENCE HouseIDSequence
  START WITH 1
  MINVALUE 1
  INCREMENT BY 1
  CACHE 100;

CREATE OR REPLACE TRIGGER HouseSeqTri
  BEFORE INSERT
  ON Houses
  FOR EACH ROW
  BEGIN
    SELECT HouseIDSequence.nextval
    INTO :new.HouseID
    FROM dual;
  END;
/


CREATE OR REPLACE TRIGGER UpdateOpinionCount
AFTER INSERT
ON Opinions
FOR EACH ROW
BEGIN
    UPDATE Articles
    SET OpinionCount = OpinionCount + 1
    WHERE ArticleID = :NEW.ArticleID;
END;
/


CREATE OR REPLACE PROCEDURE P_DELETE_HOUSE(
   p_houseID  IN  Houses.HouseID%TYPE,
   p_error_code OUT NUMBER
)
AS
BEGIN
   DELETE FROM Houses
   WHERE p_houseID = Houses.HouseID;
 
   p_error_code := SQL%ROWCOUNT;
   IF (p_error_code = 1)
   THEN
      COMMIT;
   ELSE
      ROLLBACK;
   END IF;
    EXCEPTION
   WHEN OTHERS
   THEN
      p_error_code := SQLCODE;
END P_DELETE_HOUSE;
/ 


CREATE OR REPLACE PROCEDURE StoreMessage(p_message IN VARCHAR2)
AS
BEGIN
    INSERT INTO OutputMessages (message) VALUES (p_message);
    COMMIT;
END StoreMessage;
/


CREATE OR REPLACE PROCEDURE ChangeMostInfluentialArticleName(
    p_newName IN Articles.ArticleName%TYPE
)
AS
    v_mostInfluentialArticleID INT;
    v_articleName Articles.ArticleName%TYPE;
    v_isCollaboration Articles.IsCollaboration%TYPE;
    v_author Articles.Author%TYPE;
    v_collaboration Articles.Collaboration%TYPE;
    v_readerCount Articles.ReaderCount%TYPE;
    v_opinionCount Articles.OpinionCount%TYPE;
BEGIN
    SELECT ArticleID
    INTO v_mostInfluentialArticleID
    FROM Articles
    ORDER BY ReaderCount DESC
    FETCH FIRST 1 ROWS ONLY;

    SELECT ArticleName, IsCollaboration, Author, Collaboration, ReaderCount, OpinionCount
    INTO v_articleName, v_isCollaboration, v_author, v_collaboration, v_readerCount, v_opinionCount
    FROM Articles
    WHERE ArticleID = v_mostInfluentialArticleID;

    StoreMessage('ArticleID: ' || v_mostInfluentialArticleID);
    StoreMessage('ArticleName: ' || v_articleName);
    StoreMessage('IsCollaboration: ' || v_isCollaboration);
    StoreMessage('Author: ' || v_author);
    StoreMessage('Collaboration: ' || v_collaboration);
    StoreMessage('ReaderCount: ' || v_readerCount);
    StoreMessage('OpinionCount: ' || v_opinionCount);

    UPDATE Articles
    SET ArticleName = p_newName
    WHERE ArticleID = v_mostInfluentialArticleID;

    COMMIT;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        StoreMessage('No articles found.');
    WHEN OTHERS THEN
        StoreMessage('An error occurred: ' || SQLERRM);
        ROLLBACK;
END ChangeMostInfluentialArticleName;
/

